/*
**  ComponentJS -- Component System for JavaScript <http://componentjs.com>
**  Copyright (c) 2009-2016 Ralf S. Engelschall <http://engelschall.com>
**
**  This Source Code Form is subject to the terms of the Mozilla Public
**  License (MPL), version 2.0. If a copy of the MPL was not distributed
**  with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/*
 *  This is a small ComponentJS plugin which adds some jQuery-specific
 *  functionality to the otherwise fully UI toolkit independent ComponentJS
 *  core framework.
 */
/* global ComponentJS: false */
/* global jQuery: false */
/* eslint no-unused-vars: 0 */
/* jshint unused: false */
ComponentJS.plugin("jquery",function(a,b,c){/*
     *  SPECIALIZED JQUERY SOCKET SUPPORT
     */
/*  define the extra trait for components  */
var d=b.trait({protos:{socket:function(){/*  determine parameters  */
var c=b.params("socket",arguments,{name:{def:"default"},scope:{def:null},ctx:{pos:0,req:!0},plug:{pos:1,def:null},/*  removed "req: true"  */
unplug:{pos:2,def:null},/*  removed "req: true"  */
spool:{def:null},type:{def:"default"}}),d=a.extend({},c);/*  pass-through execution to original/base method  */
/*  optionally change behaviour  */
/*  explicitly requested  */
/*  implicitly detected  */
/*  provide specialized jQuery socket functionality  */
return delete d.type,("jquery"===c.type||"default"===c.type&&"string"==typeof c.ctx.jquery&&c.ctx.jquery.match(/^[0-9]+(?:\.[0-9]+)+$/))&&(d.plug=function(a){jQuery(this).append(a)},d.unplug=function(a){jQuery(a).remove()}),this.base(d)}}});/*  mixin this trait to all components  */
a.latch("ComponentJS:bootstrap:comp:mixin",function(a){a.push(d)})});