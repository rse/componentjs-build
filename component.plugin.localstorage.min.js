/*
**  ComponentJS -- Component System for JavaScript <http://componentjs.com>
**  Copyright (c) 2009-2016 Ralf S. Engelschall <http://engelschall.com>
**
**  This Source Code Form is subject to the terms of the Mozilla Public
**  License (MPL), version 2.0. If a copy of the MPL was not distributed
**  with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/*
 *  This is a ComponentJS plugin which adds persistence support to
 *  models through the HTML5 "localStorage" facility. Every model value
 *  flagged with "store: true" is automatically saved and restored
 *  to/from the browser "localStorage". As "localStorage" is not
 *  available in every environment, this functionality has to stay in an
 *  optional plugin, of course.
 */
/* global ComponentJS: false */
/* eslint no-unused-vars: 0 */
/* jshint unused: false */
ComponentJS.plugin("localstorage",function(a,b,c){/*  sanity check run-time environment  */
if("undefined"===a.istypeof(c.localStorage))throw a.exception("plugin:localstorage",'sorry, mandatory HTML5 "localStorage" facility not supported by run-time environment');if("undefined"===a.istypeof(c.JSON))throw a.exception("plugin:localstorage",'sorry, mandatory JavaScript "JSON" encoding/decoding not supported by run-time environment');if("undefined"==typeof c.document||"undefined"==typeof c.document.location||"undefined"==typeof c.document.location.pathname)throw a.exception("plugin:localstorage",'sorry, mandatory DOM "document location" facility not supported by run-time environment');/*  determine unique store id  */
var d=function(a){var b="ComponentJS:store:";return b+=c.document.location.pathname,b+=":"+a.path("/")};/*  latch into the store loading hook  */
a.latch("ComponentJS:store-load",function(a){var b=d(a),e=c.localStorage.getItem(b);"string"==typeof e&&(a.__store=c.JSON.parse(e))}),/*  latch into the store saving hook  */
a.latch("ComponentJS:store-save",function(a){var b=d(a),e=c.JSON.stringify(a.__store);"{}"===e?c.localStorage.removeItem(b):c.localStorage.setItem(b,e)})});