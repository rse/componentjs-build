/*
**  ComponentJS -- Component System for JavaScript <http://componentjs.com>
**  Copyright (c) 2009-2016 Ralf S. Engelschall <http://engelschall.com>
**
**  This Source Code Form is subject to the terms of the Mozilla Public
**  License (MPL), version 2.0. If a copy of the MPL was not distributed
**  with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
/*
 *  This is a small ComponentJS plugin which adds a "values" method
 *  to all components which is like the regular "value" method,
 *  but instead of getter/setter-based access to a particular
 *  model value, it provides an ECMAScript/5 property-based object
 *  for direct access to all model values. Getting a property via
 *  component.values().foo is equivalent to component.value("foo").
 *  Setting a property via component.values().foo = "bar" is equivalent
 *  to component.value("foo", "bar"). As ECMAScript/5 properties are
 *  still not available in every environment, this functionality has to
 *  stay in an optional plugin, of course.
 */
/* global ComponentJS: false */
/* eslint no-unused-vars: 0 */
/* jshint unused: false */
ComponentJS.plugin("values",function(a,b,c){/*  sanity check run-time environment  */
if("function"!==a.istypeof(Object.defineProperty))throw a.exception("plugin:values","sorry, mandatory ECMAScript/5 Object.defineProperty() method not supported by run-time environment");/*  define the extra trait for components  */
var d=b.trait({protos:{/*  retrieve a property-based values object  */
values:function(){for(/*  create initial values object  */
var b,c,d={},e=!1,f=this;null!==f&&(b=f.property({name:"ComponentJS:model",returnowner:!0}),a.isdefined(b));){e=!0,c=b.property("ComponentJS:model"),f=b.parent();/*  enhance values object with properties of all models  */
for(var g in c.data){var h=g.replace(/[^a-zA-Z0-9_]+/g,"_");!function(a,b,c){Object.defineProperty(d,c,{enumerable:!1,configurable:!1,writeable:!0,get:function(){return a.value(b)},set:function(c){return a.value(b,c)}})}(b,g,h)}}/*  sanity check situation  */
if(!e)throw a.exception("values","no models found at all");/*  return generated object  */
return d}}});/*  mixin this trait to all components  */
a.latch("ComponentJS:bootstrap:comp:mixin",function(a){a.push(d)})});